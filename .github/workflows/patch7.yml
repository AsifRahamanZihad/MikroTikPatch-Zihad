name: Patch v7

on:
  workflow_dispatch:

permissions:
  contents: write

env:
  MIKRO_NPK_SIGN_PUBLIC_KEY: C293CED638A2A33C681FC8DE98EE26C54EADC5390C2DFCE197D35C83C416CF59
  MIKRO_LICENSE_PUBLIC_KEY: 8E1067E4305FCDC0CFBF95C10F96E5DFE8C49AEF486BD1A4E2E96C27F01E3E32
  CUSTOM_NPK_SIGN_PRIVATE_KEY: 7D008D9B80B036FB0205601FEE79D550927EBCA937B7008CC877281F2F8AC640
  CUSTOM_NPK_SIGN_PUBLIC_KEY: 28F886E32C141123126CFBCAD56766E99D1720CEB1F12BE2468BEBE7662FBEDB
  CUSTOM_LICENSE_PRIVATE_KEY: 9DBC845E9018537810FDAE62824322EEE1B12BAD81FCA28EC295FB397C61CE0B
  CUSTOM_LICENSE_PUBLIC_KEY: 723A34A6E3300F23E4BAA06156B9327514AEC170732655F16E04C17928DD770F
  LATEST_VERSION: "7.14.3"
  
jobs:
  Set_BuildTime:
    runs-on: ubuntu-22.04
    outputs:
      BUILD_TIME: ${{ steps.set_buildtime.outputs.BUILD_TIME }}
    steps:
      - name: Set build time
        id: set_buildtime
        run: echo "BUILD_TIME=$(date +'%s')" >> $GITHUB_OUTPUT

  Patch_RouterOS:
    needs: Set_BuildTime
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [x86]
        channel: [stable]
    env:
      TZ: 'Asia/Dhaka'
      LATEST_VERSION: ""
      ARCH: ""

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' 

    - name: Get latest routeros version
      id: get_latest
      run: |
        echo $(uname -a)
        LATEST_VERSION="7.14.3"
        echo Latest Version:$LATEST_VERSION
        BUILD_TIME=${{ needs.Set_BuildTime.outputs.BUILD_TIME }}
        echo Build Time:$BUILD_TIME
        wget -nv -O CHANGELOG https://download.mikrotik.com/routeros/$LATEST_VERSION/CHANGELOG
        cat CHANGELOG
        echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV
        echo "BUILD_TIME=${BUILD_TIME}" >> $GITHUB_ENV
        if [ "${{ matrix.arch }}" == "x86" ]; then
          ARCH=''
          echo "ARCH=$ARCH" >> $GITHUB_ENV
        elif [ "${{ matrix.arch }}" == "arm64" ]; then
          ARCH='-arm64'
          echo "ARCH=$ARCH" >> $GITHUB_ENV
        fi
        sudo apt-get update > /dev/null

    - name: Download custom ISO
      run: |
        sudo curl -s -o mikrotik.iso http://113.21.231.219:5070/mikrotik-7.14.3.iso

    - name: Patch mikrotik ISO
      run: |
        sudo apt-get install -y mkisofs xorriso > /dev/null
        sudo mkdir ./iso
        sudo mount -o loop,ro mikrotik.iso ./iso
        sudo mkdir ./new_iso
        sudo cp -r ./iso/* ./new_iso/
        sudo rsync -a ./iso/ ./new_iso/
        sudo umount ./iso
        sudo rm -rf ./iso
        sudo -E python3 patch.py npk ./new_iso/routeros-$LATEST_VERSION*.npk
        sudo cp ./new_iso/routeros-$LATEST_VERSION*.npk ./routeros-$LATEST_VERSION$ARCH-patched.npk
        NPK_FILES=$(find ./new_iso/*.npk)
        for file in $NPK_FILES; do
            sudo -E python3 npk.py sign $file $file
        done
        sudo mkdir ./efiboot
        sudo mount -o loop ./new_iso/efiboot.img ./efiboot
        if [ "${{ matrix.arch }}" == "x86" ]; then
          sudo -E python3 patch.py kernel ./efiboot/linux.x86_64
          sudo cp ./efiboot/linux.x86_64 ./BOOTX64.EFI
          sudo cp ./BOOTX64.EFI ./new_iso/isolinux/linux
          sudo umount ./efiboot
          sudo mkisofs -o mikrotik-$LATEST_VERSION$ARCH-patched.iso \
                      -V "MikroTik $LATEST_VERSION $ARCH" \
                      -sysid "" -preparer "MiKroTiK" \
                      -publisher "" -A "MiKroTiK RouterOS" \
                      -input-charset utf-8 \
                      -b isolinux/isolinux.bin \
                      -c isolinux/boot.cat \
                      -no-emul-boot \
                      -boot-load-size 4 \
                      -boot-info-table \
                      -eltorito-alt-boot \
                      -e efiboot.img \
                      -no-emul-boot \
                      -R -J \
                      ./new_iso
        elif [ "${{ matrix.arch }}" == "arm64" ]; then
          sudo -E python3 patch.py kernel ./efiboot/EFI/BOOT/BOOTAA64.EFI
          sudo umount ./efiboot
          sudo xorriso -as mkisofs -o mikrotik-$LATEST_VERSION$ARCH-patched.iso \
                      -V "MikroTik $LATEST_VERSION ${{ matrix.arch }}" \
                      -sysid "" -preparer "MiKroTiK" \
                      -publisher "" -A "MiKroTiK RouterOS" \
                      -input-charset utf-8 \
                      -b efiboot.img \
                      -no-emul-boot \
                      -R -J \
                      ./new_iso
        fi
        sudo rm -rf efiboot/
        sudo mkdir all_packages_iso$ARCH-$LATEST_VERSION
        sudo cp new_iso/*.npk all_packages_iso$ARCH-$LATEST_VERSION/
        sudo rm -rf new_iso/
        cd all_packages_iso$ARCH-$LATEST_VERSION/
        sudo zip ../all_packages$ARCH-$LATEST_VERSION-patched.zip *.npk
        cd ../
        
    - name: Cache routeros-${{ env.LATEST_VERSION }}${{ env.ARCH }}.npk & all_packages${{ env.ARCH }}-${{ env.LATEST_VERSION }}.zip
      if: steps.get_latest.outputs.has_new_version == 'true' && matrix.arch != 'x86'
      id: cache_routeros_npk
      uses: actions/cache@v4
      with:
        path: |
          routeros-${{ env.LATEST_VERSION }}${{ env.ARCH }}.npk
          all_packages${{ env.ARCH }}-${{ env.LATEST_VERSION }}.zip
        key: routeros-${{ env.LATEST_VERSION }}-${{ matrix.arch }}

    - name: Get routeros-${{ env.LATEST_VERSION }}${{ env.ARCH }}.npk & all_packages${{ env.ARCH }}-${{ env.LATEST_VERSION }}.zip
      if: steps.get_latest.outputs.has_new_version == 'true' && steps.cache_routeros_npk.outputs.cache-hit != 'true' && matrix.arch != 'x86'
      run: |
          sudo curl -s -o routeros-$LATEST_VERSION$ARCH.npk https://download.mikrotik.com/routeros/$LATEST_VERSION/routeros-$LATEST_VERSION$ARCH.npk
          sudo curl -s -o all_packages$ARCH-$LATEST_VERSION.zip https://download.mikrotik.com/routeros/$LATEST_VERSION/all_packages$ARCH-$LATEST_VERSION.zip

    - name: Patch routeros-${{ env.LATEST_VERSION }}${{ env.ARCH }}.npk & all_packages${{ env.ARCH }}-${{ env.LATEST_VERSION }}.zip
      if: steps.get_latest.outputs.has_new_version == 'true' && matrix.arch != 'x86'
      run: |
        sudo mkdir ./all_packages$ARCH-$LATEST_VERSION
        sudo unzip all_packages$ARCH-$LATEST_VERSION.zip -d ./all_packages$ARCH-$LATEST_VERSION/
        sudo cp routeros-$LATEST_VERSION$ARCH.npk routeros-$LATEST_VERSION$ARCH-patched.npk
        sudo -E python3 patch.py npk routeros-$LATEST_VERSION$ARCH-patched.npk
        NPK_FILES=$(find ./all_packages$ARCH-$LATEST_VERSION/*.npk)
        for file in $NPK_FILES; do
            sudo -E python3 npk.py sign $file $file
        done
        cd ./all_packages$ARCH-$LATEST_VERSION
        sudo zip ../all_packages$ARCH-$LATEST_VERSION-patched.zip *.npk
        cd ..
        sudo rm -rf ./all_packages$ARCH-$LATEST_VERSION

    - name: Create Release tag ${{ env.LATEST_VERSION }}
      if: steps.get_latest.outputs.has_new_version == 'true'
      uses: softprops/action-gh-release@v2
      with:
        name: "RouterOS ${{ env.LATEST_VERSION }}"
        body_path: "CHANGELOG"
        tag_name: ${{ env.LATEST_VERSION }}
        make_latest: true
        files: |
          mikrotik-${{ env.LATEST_VERSION }}${{ env.ARCH }}-patched.iso
          netinstall-${{ env.LATEST_VERSION }}-patched.zip
          netinstall64-${{ env.LATEST_VERSION }}-patched.zip
          netinstall-${{ env.LATEST_VERSION }}-patched.tar.gz
          install-image-${{ env.LATEST_VERSION }}${{ env.ARCH }}-patched.*.zip
          chr-${{ env.LATEST_VERSION }}${{ env.ARCH }}-patched.*.zip
          routeros-${{ env.LATEST_VERSION }}${{ env.ARCH }}-patched.npk
          all_packages*-${{ env.LATEST_VERSION }}-patched.zip
